<policies>
	<inbound>
		<base />
		<rewrite-uri template="/CatalogService.svc" copy-unmatched-params="false" />
		<set-header name="SOAPAction" exists-action="override">
			<value>"http://tempuri.org/ICatalogService/CreateAvailableStock"</value>
		</set-header>
		<set-body template="liquid">
			<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns="http://tempuri.org/">
				<soap:Body>
					<CreateAvailableStock>
						<catalogItemsStock>
							<AvailableStock xmlns="http://schemas.datacontract.org/2004/07/eShopWCFService">{{body.createAvailableStock.catalogItemsStock.availableStock}}</AvailableStock>
							<CatalogItemId xmlns="http://schemas.datacontract.org/2004/07/eShopWCFService">{{body.createAvailableStock.catalogItemsStock.catalogItemId}}</CatalogItemId>
							<Date xmlns="http://schemas.datacontract.org/2004/07/eShopWCFService">{{body.createAvailableStock.catalogItemsStock.date}}</Date>
							<StockId xmlns="http://schemas.datacontract.org/2004/07/eShopWCFService">{{body.createAvailableStock.catalogItemsStock.stockId}}</StockId>
						</catalogItemsStock>
					</CreateAvailableStock>
				</soap:Body>
			</soap:Envelope>
		</set-body>
		<set-header name="Content-Type" exists-action="override">
			<value>text/xml</value>
		</set-header>
	</inbound>
	<backend>
		<base />
	</backend>
	<outbound>
		<base />
		<choose>
			<when condition="@(context.Response.StatusCode < 400)">
				<set-body template="liquid">
                                                    {
  "createAvailableStockResponse" : 
  {
  }
}

                                        </set-body>
			</when>
			<otherwise>
				<set-variable name="old-body" value="@(context.Response.Body.As<string>(preserveContent: true))" />
				<!-- Error response as per https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#7102-error-condition-responses -->
				<set-body template="liquid">
                {
                "error": {
                    "code": "{{body.envelope.body.fault.faultcode}}",
                      "message": "{{body.envelope.body.fault.faultstring}}"
                      }
            }
                </set-body>
				<choose>
					<when condition="@(string.IsNullOrEmpty(context.Response.Body.As<JObject>(preserveContent: true)["error"]["code"].ToString()) && string.IsNullOrEmpty(context.Response.Body.As<JObject>(preserveContent: true)["error"]["message"].ToString()))">
						<set-body>@{
                            var newResponseBody = new JObject();
                            newResponseBody["error"] = new JObject();
                            newResponseBody["error"]["code"] = "InvalidErrorResponseBody";
                            if (string.IsNullOrEmpty((string)context.Variables["old-body"]))
                            {
                                newResponseBody["error"]["message"] = "The error response body was not a valid SOAP error response. The response body was empty.";
                            }
                            else
                            {
                                newResponseBody["error"]["message"] = "The error response body was not a valid SOAP error response. The response body was: '" + context.Variables["old-body"] + "'.";
                            }
                            return newResponseBody.ToString();
                        }
                        </set-body>
					</when>
				</choose>
			</otherwise>
		</choose>
		<set-header name="Content-Type" exists-action="override">
			<value>application/json</value>
		</set-header>
	</outbound>
</policies>